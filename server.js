const express = require('express');
const app = express();
const PORT = process.env.PORT || 3000;

// Health check endpoint (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render)
app.get('/health', (req, res) => {
  res.status(200).send('OK');
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–µ—Ä–º (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Redis –∏–ª–∏ –ë–î)
const farms = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
function startBackgroundTasks() {
  setInterval(() => {
    const now = Date.now();
    farms.forEach((farm, farmId) => {
      if (farm.harvestReady && !farm.notified) {
        sendTelegramNotification(farmId, farm.chatId);
        farm.notified = true;
      }
    });
  }, 30000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(farmId, chatId) {
  try {
    await bot.telegram.sendMessage(
      chatId,
      `üå± –£—Ä–æ–∂–∞–π –≥–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É –Ω–∞ —Ñ–µ—Ä–º–µ ${farmId}!`,
      { reply_markup: { inline_keyboard: [[
        { text: "–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π", callback_data: `harvest_${farmId}` }
      ]] } }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
  }
}

app.post('/reset_harvest_notified', express.json(), (req, res) => {
  const { farmId } = req.body;
  
  if (!farms.has(farmId)) {
    return res.status(404).json({ error: 'Farm not found' });
  }

  farms.get(farmId).notified = false;
  res.status(200).json({ status: 'success' });
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  startBackgroundTasks(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
}); 